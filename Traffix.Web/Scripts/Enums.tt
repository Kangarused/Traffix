<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".ts" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ Include File="T4TS.tt.settings.t4" #>

<#= Render() #>

<#+ 

string Render(){
	DTE dte = null;

	// Get the DTE service from the host
	var serviceProvider = Host as IServiceProvider;
	if (serviceProvider != null)
		dte = serviceProvider.GetService(typeof(SDTE)) as DTE;

	// Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
	if (dte == null)
		throw new Exception("Can only execute through the Visual Studio host");

	var output = new List<EnumModule>();

	var projects = dte.Solution.Projects;
	foreach(Project project in projects){
		Traverse(project.ProjectItems, output);	
	}

	var rendered = OutputFormatter.GetOutput(output, SettingsValues);

	return rendered;
}

class OutputFormatter {
	public static string GetOutput(List<EnumModule> modules, Dictionary<string, object> Settings){
		var output = new StringBuilder();
            
        output.AppendLine("/****************************************************************************");
        output.AppendLine("  Generated by Enum.tt - don't make any changes in this file");
        output.AppendLine("****************************************************************************/");
		output.AppendLine("");

		

	    

		output.AppendLine("module " + Settings["DefaultModule"] + " {");
	    output.AppendLine("");

		foreach(EnumModule module in modules){
			RenderTypes(module, output);
		}
		output.AppendLine("");
		output.AppendLine("");

		foreach(EnumModule module in modules){
			RenderModule(module, output);
		}
		

	    output.AppendLine("\texport const EnumLabelDictionary = {");
		foreach(EnumModule module in modules){
		    foreach (var member in module.Members)
		    {
		        output.AppendLine(String.Format("\t\t\"{0}{1}\":\"{2}\",",module.Name,member.Item,member.Description));
		    }
		}

		output.AppendLine("\t\t"+@"get: function(type, key) {
			return this[type + key];
		}
	}");

		output.AppendLine("}");

		return output.ToString();
	}

	public static void RenderTypes(EnumModule module, StringBuilder sb){
		sb.AppendLine("\t export type I" + module.Name + " = "  + string.Join(" | " , module.Members.Select(i=>"\"" + i.Item + "\"").ToArray()) + ";");
	}

	public static void RenderModule(EnumModule module, StringBuilder sb){
		sb.AppendLine("\t export const " + module.Name + " = {");
		
		foreach(EnumMember member in module.Members){
			sb.AppendLine("\t\t " + member.Item + ": \"" + member.Item + "\" as I" + module.Name + ",");
		}

		sb.AppendLine("\t }");
	}
}


/*
export const MyStringEnum = {
        Member1: "member1" as MyStringEnum,
        Member2: "member2" as MyStringEnum
};
*/
private void Traverse(ProjectItems items, List<EnumModule> output)
{
	foreach (ProjectItem pi in items)
	{
		if (pi.FileCodeModel != null)
		{
			var codeElements = pi.FileCodeModel.CodeElements;
                    
			foreach (object elem in codeElements)
			{
				if (elem is CodeNamespace)
				{
					var members = ((CodeNamespace)elem).Members;
					foreach(var member in members){
						if (member is CodeEnum){
							var codeClass = member as CodeEnum;

							

							foreach (CodeAttribute attr in codeClass.Attributes)
							{
								if (attr.Name == "TypescriptEnum"){
									output.Add(ProcessCodeClass(codeClass));
								}
							}
						}
					}
				}
			}
		}

		if (pi.ProjectItems != null)
			Traverse(pi.ProjectItems, output);
	}
}

private EnumModule ProcessCodeClass(CodeEnum codeClass){
	var output = new EnumModule();
	output.Members = new List<EnumMember>();
	var name = codeClass.Name;

	foreach(CodeVariable variable in codeClass.Members)
    {
		var enumMember = new EnumMember();
		enumMember.Item = variable.Prototype;
		foreach (CodeAttribute attr in variable.Attributes)
		{
			if (attr.Name == "Description"){
				enumMember.Description = attr.Value.Replace("\"","");
			}
		}

		if (string.IsNullOrEmpty(enumMember.Description))
		{
			enumMember.Description = enumMember.Item;
		}

		output.Members.Add(enumMember);
	}
	output.Name = name;
	
	return output;
}

class EnumMember
{
	public string Item {get;set;}
	public string Description {get;set;}
}

class EnumModule {
	public string Name {get;set;}
	public List<EnumMember> Members {get;set;}
}
		
#>